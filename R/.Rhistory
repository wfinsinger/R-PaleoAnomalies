colnames(coinc_events) <- c("ages.thresh", "prec_e", "trig_e")
coinc_events$ages.thresh <- serieA$thresh$ages.thresh
# Get precursor events (for which A-events are B-events precursors?)
for (i in 1:events_length) {
#i = 5
if (is.na(eventsA[i])) {
coinc_events$prec_e[i] <- NA
}
if (eventsA[i] == 1) {
start <- i + tau + del_T
if (sym == TRUE) {
end <- i + tau - del_T
}
if (sym == FALSE) {
end <- i + tau
}
if (start < 1) {
start <- 1
}
if (end < 1) {
end <- 1
}
if (end > events_length) {
end <- events_length
}
if (is.element(1, eventsB[start:end]) == T) {
coinc_events$prec_e[i] <- 1
}
# Get precursor events (which B-events trigger A events?)
for (i in 1:events_length) {
#i = 5
if (is.na(eventsB[i])) {
coinc_events$trig_e[i] <- NA
}
if (eventsB[i] == 1) {
end <- i - tau - del_T
if (sym == TRUE) {
start <- i - tau + del_T
}
if (sym == FALSE) {
start <- i - tau
}
if (start < 1) {
start <- 1
}
if (end < 1) {
end <- 1
}
if (start > events_length) {
start <- events_length
}
if (end > events_length) {
end <- events_length
}
if (is.element(1, eventsA[start:end]) == T) {
coinc_events$trig_e[i] <- 1
}
# Get both trigger and precursor coincidences
coinc_events <- dplyr::mutate(coinc_events,
sync_e = ifelse(prec_e == 1 & trig_e == 1, 1, 0))
coinc_events$eventsA <- eventsA
coinc_events$eventsB <- eventsB
#### Gather output data ################################################################
#coinc_events <- coinc_events
settings <- list(proxyA = serieA$thresh$proxy, proxyB = serieB$thresh$proxy,
change.all = change.all, changeA = changeA, changeB = changeB,
del_T = del_T, sym = sym, tau = tau)
output <- list(coinc_events = coinc_events, settings = settings)
# Return output
return(output)
get_coincidences <- function(seriesA, seriesB, change.all=T, changeA=NULL, changeB=NULL,
del_T = 0, sym = FALSE, tau = 0,
seriesAname = "Event series A",
seriesBname = "Event series B") {
# Uncomment these lines to test the function
rm(list = ls())
load("../Data-Out/01_PRA_SJH_Anomalies.RData")
rm(dist.detr1, dist.detr2, CHAR.detr1, CHAR.detr2, geoch.detr1, geoch.detr2,
p.detr1, p.detr2, res.stats1, res.stats2)
serieA = K_Al.thresh.gl1
serieB = Ti.thresh.gl1
change.all = F
changeA = "pos"
changeB = "pos"
del_T = 1
sym = F
tau = 0
seriesAname = "Event series A"
seriesBname = "Event series B"
######## Require packages ##############################################################
require(dplyr)
######## Checkup if the arguments of the function are OK ###############################
# Check change.all, changeA and changeB parameters
if (change.all == F & is.null(changeA) == T | is.null(changeB) == T) {
print("Either the 'changeA' or the 'changeB' parameter is not specified")
}
# Check if length of event series are equal
# Check if ages.thresh are the same in the two series
###### Extract the event time series from input data ###################################
if (change.all == T) {
eventsA <- serieA$thresh$peaks.pos + serieA$thresh$peaks.neg
eventsB <- serieB$thresh$peaks.pos + serieB$thresh$peaks.neg
}
if (change.all == F) {
if (changeA == "pos") {
eventsA <- serieA$thresh$peaks.pos
}
if (changeA == "neg") {
eventsA <- serieA$thresh$peaks.neg
}
if (changeB == "pos") {
eventsB <- serieB$thresh$peaks.pos
}
if (changeB == "neg") {
eventsB <- serieB$thresh$peaks.neg
}
######### Get coincidences #############################################################
# Setup an empty data frame where data will be written at the end of each loop
events_length <- length(eventsA)
coinc_events <- as.data.frame(matrix(0, nrow = events_length, ncol = 3))
colnames(coinc_events) <- c("ages.thresh", "prec_e", "trig_e")
coinc_events$ages.thresh <- serieA$thresh$ages.thresh
# Get precursor events (for which A-events are B-events precursors?)
for (i in 1:events_length) {
#i = 5
if (is.na(eventsA[i])) {
coinc_events$prec_e[i] <- NA
}
if (eventsA[i] == 1) {
start <- i + tau + del_T
if (sym == TRUE) {
end <- i + tau - del_T
}
if (sym == FALSE) {
end <- i + tau
}
if (start < 1) {
start <- 1
}
if (end < 1) {
end <- 1
}
if (end > events_length) {
end <- events_length
}
if (is.element(1, eventsB[start:end]) == T) {
coinc_events$prec_e[i] <- 1
}
# Get precursor events (which B-events trigger A events?)
for (i in 1:events_length) {
#i = 5
if (is.na(eventsB[i])) {
coinc_events$trig_e[i] <- NA
}
if (eventsB[i] == 1) {
end <- i - tau - del_T
if (sym == TRUE) {
start <- i - tau + del_T
}
if (sym == FALSE) {
start <- i - tau
}
if (start < 1) {
start <- 1
}
if (end < 1) {
end <- 1
}
if (start > events_length) {
start <- events_length
}
if (end > events_length) {
end <- events_length
}
if (is.element(1, eventsA[start:end]) == T) {
coinc_events$trig_e[i] <- 1
}
# Get both trigger and precursor coincidences
coinc_events <- dplyr::mutate(coinc_events,
sync_e = ifelse(prec_e == 1 & trig_e == 1, 1, 0))
coinc_events$eventsA <- eventsA
coinc_events$eventsB <- eventsB
#### Gather output data ################################################################
#coinc_events <- coinc_events
settings <- list(proxyA = serieA$thresh$proxy, proxyB = serieB$thresh$proxy,
change.all = change.all, changeA = changeA, changeB = changeB,
del_T = del_T, sym = sym, tau = tau)
output <- list(coinc_events = coinc_events, settings = settings)
# Return output
return(output)
}
# Uncomment these lines to test the function
d = output
smooth = "loess"
smooth_span = 0.2
sync_smooth <- loess(formula = coinc_events$sync_e ~ ages.thresh, data = coinc_events,
span = smooth_span)$fitted
x.lim <- c(max(d$coinc_events$ages), min(d$coinc_events$ages))
plot(coinc_events$ages.thresh, coinc_events$trig_e, type = "p", xlim = x.lim,
main = paste(d$settings$proxyA, "events triggered by", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
plot(coinc_events$ages.thresh, coinc_events$sync_e, type = "p", xlim = x.lim,
main = paste(d$settings$proxyA, "events synchr. with", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
lines(coinc_events$ages.thresh, sync_smooth, lwd = 2)
require(mgcv)
gam(formula = coinc_events$sync_e ~ ages.thresh, data = coinc_events)
gam(formula = sync_e ~ ages.thresh, data = coinc_events)
sync_gam <- gam(formula = sync_e ~ ages.thresh, data = coinc_events)
gam.check(sync_gam)
x.lim <- c(max(d$coinc_events$ages), min(d$coinc_events$ages))
plot(coinc_events$ages.thresh, coinc_events$trig_e, type = "p", xlim = x.lim,
main = paste(d$settings$proxyA, "events triggered by", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
plot(coinc_events$ages.thresh, coinc_events$sync_e, type = "p", xlim = x.lim,
main = paste(d$settings$proxyA, "events synchr. with", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
lines(coinc_events$ages.thresh, sync_smooth, lwd = 2)
lines(coinc_events$ages.thresh, sync_gam$fitted.values, lwd = 2, col = "red")
sync_gam <- gam(formula = sync_e ~ ages.thresh, data = coinc_events,
family = quasipoisson(link = "log"), method = "REML")
gam.check(sync_gam)
x.lim <- c(max(d$coinc_events$ages), min(d$coinc_events$ages))
plot(coinc_events$ages.thresh, coinc_events$trig_e, type = "p", xlim = x.lim,
main = paste(d$settings$proxyA, "events triggered by", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
plot(coinc_events$ages.thresh, coinc_events$sync_e, type = "p", xlim = x.lim,
main = paste(d$settings$proxyA, "events synchr. with", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
lines(coinc_events$ages.thresh, sync_smooth, lwd = 2)
lines(coinc_events$ages.thresh, sync_gam$fitted.values, lwd = 2, col = "red")
sync_gam <- gam(formula = sync_e ~ ages.thresh, data = coinc_events,
family = poisson(link = "log"), method = "REML")
gam.check(sync_gam)
x.lim <- c(max(d$coinc_events$ages), min(d$coinc_events$ages))
plot(coinc_events$ages.thresh, coinc_events$trig_e, type = "p", xlim = x.lim,
main = paste(d$settings$proxyA, "events triggered by", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
plot(coinc_events$ages.thresh, coinc_events$sync_e, type = "p", xlim = x.lim,
main = paste(d$settings$proxyA, "events synchr. with", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
lines(coinc_events$ages.thresh, sync_smooth, lwd = 2)
lines(coinc_events$ages.thresh, sync_gam$fitted.values, lwd = 2, col = "red")
sync_gam <- gam(formula = ages.thresh ~ s(sync_e), data = coinc_events,
family = poisson(link = "log"), method = "REML")
sync_gam <- gam(formula = ages.thresh ~ s(sync_e), data = coinc_events,
family = quasipoisson(link = "log"), method = "REML")
gam.check(sync_gam)
sync_smooth <- loess(formula = coinc_events$sync_e ~ ages.thresh, data = coinc_events,
span = smooth_span)$fitted
x.lim <- c(max(d$coinc_events$ages), min(d$coinc_events$ages))
plot(coinc_events$ages.thresh, coinc_events$trig_e, type = "p", xlim = x.lim,
main = paste(d$settings$proxyA, "events triggered by", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
plot(coinc_events$ages.thresh, coinc_events$sync_e, type = "p", xlim = x.lim,
main = paste(d$settings$proxyA, "events synchr. with", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
lines(coinc_events$ages.thresh, sync_smooth, lwd = 2)
smooth_span = 0.1
sync_smooth <- loess(formula = coinc_events$sync_e ~ ages.thresh, data = coinc_events,
span = smooth_span)$fitted
x.lim <- c(max(d$coinc_events$ages), min(d$coinc_events$ages))
plot(coinc_events$ages.thresh, coinc_events$trig_e, type = "p", xlim = x.lim,
main = paste(d$settings$proxyA, "events triggered by", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
plot(coinc_events$ages.thresh, coinc_events$sync_e, type = "p", xlim = x.lim,
main = paste(d$settings$proxyA, "events synchr. with", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
lines(coinc_events$ages.thresh, sync_smooth, lwd = 2)
rm(list = ls())
load("../Data-Out/01_PRA_SJH_Anomalies.RData")
rm(dist.detr1, dist.detr2, CHAR.detr1, CHAR.detr2, geoch.detr1, geoch.detr2,
p.detr1, p.detr2, res.stats1, res.stats2)
serieA = K_Al.thresh.gl1
serieB = Ti.thresh.gl1
change.all = F
changeA = "pos"
changeB = "pos"
del_T = 1
sym = F
tau = 0
seriesAname = "Event series A"
seriesBname = "Event series B"
######## Require packages ##############################################################
require(dplyr)
require(mgcv)
######## Checkup if the arguments of the function are OK ###############################
# Check change.all, changeA and changeB parameters
if (change.all == F & is.null(changeA) == T | is.null(changeB) == T) {
print("Either the 'changeA' or the 'changeB' parameter is not specified")
}
# Check if length of event series are equal
# Check if ages.thresh are the same in the two series
###### Extract the event time series from input data ###################################
if (change.all == T) {
eventsA <- serieA$thresh$peaks.pos + serieA$thresh$peaks.neg
eventsB <- serieB$thresh$peaks.pos + serieB$thresh$peaks.neg
}
if (change.all == F) {
if (changeA == "pos") {
eventsA <- serieA$thresh$peaks.pos
}
if (changeA == "neg") {
eventsA <- serieA$thresh$peaks.neg
}
if (changeB == "pos") {
eventsB <- serieB$thresh$peaks.pos
}
if (changeB == "neg") {
eventsB <- serieB$thresh$peaks.neg
}
######### Get coincidences #############################################################
# Setup an empty data frame where data will be written at the end of each loop
events_length <- length(eventsA)
coinc_events <- as.data.frame(matrix(0, nrow = events_length, ncol = 3))
colnames(coinc_events) <- c("ages.thresh", "prec_e", "trig_e")
coinc_events$ages.thresh <- serieA$thresh$ages.thresh
# Get precursor events (for which A-events are B-events precursors?)
for (i in 1:events_length) {
#i = 5
if (is.na(eventsA[i])) {
coinc_events$prec_e[i] <- NA
}
if (eventsA[i] == 1) {
start <- i + tau + del_T
if (sym == TRUE) {
end <- i + tau - del_T
}
if (sym == FALSE) {
end <- i + tau
}
if (start < 1) {
start <- 1
}
if (end < 1) {
end <- 1
}
if (end > events_length) {
end <- events_length
}
if (is.element(1, eventsB[start:end]) == T) {
coinc_events$prec_e[i] <- 1
}
# Get precursor events (which B-events trigger A events?)
for (i in 1:events_length) {
#i = 5
if (is.na(eventsB[i])) {
coinc_events$trig_e[i] <- NA
}
if (eventsB[i] == 1) {
end <- i - tau - del_T
if (sym == TRUE) {
start <- i - tau + del_T
}
if (sym == FALSE) {
start <- i - tau
}
if (start < 1) {
start <- 1
}
if (end < 1) {
end <- 1
}
if (start > events_length) {
start <- events_length
}
if (end > events_length) {
end <- events_length
}
if (is.element(1, eventsA[start:end]) == T) {
coinc_events$trig_e[i] <- 1
}
# Get both trigger and precursor coincidences
coinc_events <- dplyr::mutate(coinc_events,
sync_e = ifelse(prec_e == 1 & trig_e == 1, 1, 0))
coinc_events$eventsA <- eventsA
coinc_events$eventsB <- eventsB
#### Gather output data ################################################################
#coinc_events <- coinc_events
settings <- list(proxyA = serieA$thresh$proxy, proxyB = serieB$thresh$proxy,
change.all = change.all, changeA = changeA, changeB = changeB,
del_T = del_T, sym = sym, tau = tau)
output <- list(coinc_events = coinc_events, settings = settings)
# Return output
return(output)
}
#### Plot results obtained with the get_coincidences() function ##########################
#plot_coincidences <- function(d, smooth=loess) {
# Uncomment these lines to test the function
d = output
smooth = "loess"
smooth_span = 0.1
sync_smooth <- loess(formula = coinc_events$sync_e ~ ages.thresh, data = coinc_events,
span = smooth_span)$fitted
# sync_gam <- gam(formula = ages.thresh ~ s(sync_e), data = coinc_events,
#                 family = quasipoisson(link = "log"), method = "REML")
# gam.check(sync_gam)
x.lim <- c(max(d$coinc_events$ages), min(d$coinc_events$ages))
plot(coinc_events$ages.thresh, coinc_events$trig_e, type = "p", xlim = x.lim,
main = paste(d$settings$proxyA, "events triggered by", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
plot(coinc_events$ages.thresh, coinc_events$sync_e, type = "p", xlim = x.lim,
main = paste(d$settings$proxyA, "events synchr. with", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
lines(coinc_events$ages.thresh, sync_smooth, lwd = 2)
#lines(coinc_events$ages.thresh, sync_gam$fitted.values, lwd = 2, col = "red")
#
plot(x = NULL, y = NULL, xlim = x.lim, ylim = c(0,1))
points(coinc_events$ages.thresh, coinc_events$trig_e, type = "p")
plot(x = NULL, y = NULL, xlim = x.lim, ylim = c(0,1),
main = paste(d$settings$proxyA, "events triggered by", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
points(coinc_events$ages.thresh, coinc_events$trig_e, type = "p", ylim = c(0.8,1))
lines(coinc_events$ages.thresh, sync_smooth, lwd = 2)
sync_smooth <- loess(formula = coinc_events$sync_e ~ ages.thresh, data = coinc_events,
span = smooth_span)$fitted
sync_gam <- gam(formula = sync_e ~ s(ages.thresh, k=3), data = coinc_events,
family = quasipoisson(link = "log"), method = "REML")
gam.check(sync_gam)
x.lim <- c(max(d$coinc_events$ages), min(d$coinc_events$ages))
plot(x = NULL, y = NULL, xlim = x.lim, ylim = c(0,1),
main = paste(d$settings$proxyA, "events triggered by", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
points(coinc_events$ages.thresh, coinc_events$trig_e, type = "p")
lines(coinc_events$ages.thresh, sync_smooth, lwd = 2)
lines(coinc_events$ages.thresh, sync_gam$fitted.values, lwd = 2, col = "red")
sync_gam <- gam(formula = sync_e ~ s(ages.thresh), data = coinc_events,
family = quasipoisson(link = "log"), method = "REML")
gam.check(sync_gam)
x.lim <- c(max(d$coinc_events$ages), min(d$coinc_events$ages))
plot(x = NULL, y = NULL, xlim = x.lim, ylim = c(0,1),
main = paste(d$settings$proxyA, "events triggered by", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
points(coinc_events$ages.thresh, coinc_events$trig_e, type = "p")
lines(coinc_events$ages.thresh, sync_smooth, lwd = 2)
lines(coinc_events$ages.thresh, sync_gam$fitted.values, lwd = 2, col = "red")
sync_gam <- gam(formula = sync_e ~ s(ages.thresh), data = coinc_events,
family = poisson(link = "log"), method = "REML")
gam.check(sync_gam)
x.lim <- c(max(d$coinc_events$ages), min(d$coinc_events$ages))
plot(x = NULL, y = NULL, xlim = x.lim, ylim = c(0,1),
main = paste(d$settings$proxyA, "events triggered by", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
points(coinc_events$ages.thresh, coinc_events$trig_e, type = "p")
lines(coinc_events$ages.thresh, sync_smooth, lwd = 2)
lines(coinc_events$ages.thresh, sync_gam$fitted.values, lwd = 2, col = "red")
sync_gam <- mgcv::predict.gam(mgcv::gam(sync_e ~ s(ages.thresh)), data = coinc_events,
family = stats::Gamma(),
method = "REML")
sync_gam <- mgcv::predict.gam(mgcv::gam(sync_e ~ s(ages.thresh), data = coinc_events,
family = stats::Gamma(),
method = "REML"),
type = "response")
sync_gam <- gam(formula = sync_e ~ s(ages.thresh), data = coinc_events,
family = quasipoisson(link = "log"), method = "REML")
x.lim <- c(max(d$coinc_events$ages), min(d$coinc_events$ages))
plot(x = NULL, y = NULL, xlim = x.lim, ylim = c(0,1),
main = paste(d$settings$proxyA, "events triggered by", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
points(coinc_events$ages.thresh, coinc_events$trig_e, type = "p")
lines(coinc_events$ages.thresh, sync_smooth, lwd = 2)
lines(coinc_events$ages.thresh, sync_gam$fitted.values, lwd = 2, col = "red")
sync_gam <- mgcv::predict.gam(mgcv::gam(sync_e ~ s(ages.thresh), data = coinc_events,
family = mgcv::Tweedie(p = 2),
method = "REML"),
type = "response")
sync_gam <- mgcv::predict.gam(mgcv::gam(sync_e ~ s(ages.thresh), data = coinc_events,
family = mgcv::Tweedie(p = 2),
method = "REML"),
type = "response")
sync_gam <- mgcv::predict.gam(mgcv::gam(sync_e ~ s(ages.thresh + min(ages.thresh)),
data = coinc_events,
family = mgcv::Tweedie(p = 2),
method = "REML"),
type = "response")
ages.thresh + min(ages.thresh)
sync_gam <- mgcv::predict.gam(mgcv::gam(sync_e ~ s(ages.thresh + min(ages.thresh + 1)),
data = coinc_events,
family = mgcv::Tweedie(p = 2),
method = "REML"),
type = "response")
View(coinc_events)
sync_gam <- mgcv::predict.gam(mgcv::gam(sync_e ~ s(ages.thresh + min(ages.thresh + 1)),
data = coinc_events,
family = stats::quasipoisson(),
method = "REML"),
type = "response")
sync_gam <- mgcv::predict.gam(mgcv::gam(sync_e ~ s(ages.thresh),
data = coinc_events,
family = stats::quasipoisson(),
method = "REML"),
type = "response")
lines(coinc_events$ages.thresh, sync_gam$fitted.values, lwd = 2, col = "red")
sync_gam <- mgcv::predict.gam(mgcv::gam(sync_e ~ s(ages.thresh),
data = coinc_events,
family = stats::quasipoisson(),
method = "REML"),
type = "response")
lines(coinc_events$ages.thresh, sync_gam, lwd = 2, col = "red")
x.lim <- c(max(d$coinc_events$ages), min(d$coinc_events$ages))
plot(x = NULL, y = NULL, xlim = x.lim, ylim = c(0,1),
main = paste(d$settings$proxyA, "events triggered by", d$settings$proxyB, "events"),
xlab = "Age (cal yrs BP)", ylab = "Coincident events")
points(coinc_events$ages.thresh, coinc_events$trig_e, type = "p")
lines(coinc_events$ages.thresh, sync_smooth, lwd = 2)
lines(coinc_events$ages.thresh, sync_gam, lwd = 2, col = "red")
## Arguments used to check the function:
rm(list = ls())
geoch1 <- openxlsx::read.xlsx(xlsxFile = "./Data-In/PRA-data-08_2021.xlsx", sheet = 1,
startRow = 2)
charcoal1 <- openxlsx::read.xlsx(xlsxFile = "./Data-In/PRA-data-08_2021.xlsx", sheet = 2,
startRow = 2)
